import glob
import os


configfile: '../config/pb_mhc_rse_config.yaml'

wc =  glob_wildcards('../fastq/{sample}.fastq.gz')
HAPS = ['hap1', 'hap2']
OPP = {'hap1':'hap2', 'hap2':'hap1'}
SAMPLES = []

for sample in wc.sample:
    SAMPLES.append(sample)

rule all:
    input:
       expand("../results/{sample}_final_contigs/{sample}_{hap}_final_contigs.fasta", sample=SAMPLES, hap=HAPS)

rule downsample_reads:
    input:
        "../fastq/{sample}.fastq.gz"
    output:
        "../results/{sample}_reads/{sample}_ds.fastq.gz"
    params:
        cap=config['read_cap']
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=20000
    shell:
        "seqtk sample -s 99 {input} {params.cap} | gzip > {output}"
        
rule align_all_to_ref:
    input:
        "../results/{sample}_reads/{sample}_ds.fastq.gz"
    output:
        "../results/{sample}_align/{sample}_ref.bam"
    params:
        ref_fasta=config['ref_fasta'],
        ref_regions=config['ref_regions']
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 12
    resources:
        mem_mb=2500
    shell:
        "minimap2 -x map-hifi --secondary=no -t {threads} -Y -a ../resources/{params.ref_fasta} {input} | samtools view -Sh | samtools view -h -L ../resources/{params.ref_regions} | samtools sort - -o {output} && samtools index {output}"

rule extract_mhc_reads:
    input:
        align="../results/{sample}_align/{sample}_ref.bam",
        reads="../results/{sample}_reads/{sample}_ds.fastq.gz"
    output:
        "../results/{sample}_reads/{sample}_MHC_full_all.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "python scripts/extract_mhc_reads.py {input.align} {input.reads} {output}"
        
rule reference_align:
    input:
        "../results/{sample}_reads/{sample}_MHC_full_all.fasta",
    output:
        "../results/{sample}_scaffold/{sample}_ref.bam"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 12
    resources:
        mem_mb=2000
    shell:
        "minimap2 -x map-hifi --secondary=no -t {threads} -a ../resources/hg38_chr6.fa {input} | samtools view -hb -F 2048 -q 1 - | samtools sort - -o {output} && samtools index {output}"
        
rule reference_variant_call:
    input:
        "../results/{sample}_scaffold/{sample}_ref.bam"
    output:
        raw_vcf="../results/{sample}_scaffold/{sample}_ls.vcf",
        filt_vcf="../results/{sample}_scaffold/{sample}_ls_filt.vcf.gz",
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=12000
    shell:
        """
        longshot --bam {input} --ref ../resources/hg38_chr6.fa --out {output.raw_vcf} --min_alt_frac 0.12 --min_alt_count 6 -q 0 -F -v ../resources/Infinium.vcf.gz -P 0.001
        python scripts/filter_reference_vcf.py {output.raw_vcf} ../resources/Infinium_known.txt {output.filt_vcf} --min_obs 6 --min_frac 0.12
        """
    
rule reference_phase:
    input:
        vcf="../results/{sample}_scaffold/{sample}_ls_filt.vcf.gz",
        align="../results/{sample}_scaffold/{sample}_ref.bam"
    output:
        "../results/{sample}_scaffold/{sample}_ls_phase.vcf.gz"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "whatshap phase --reference ../resources/hg38_chr6.fa -o {output} --ignore-read-groups {input.vcf} {input.align} && tabix -p vcf -f {output}"
    
    
rule reference_haplotype_estimation:
    input:
        "../results/{sample}_scaffold/{sample}_ls_phase.vcf.gz"
    output:
        "../results/{sample}_scaffold/{sample}_shapeit.vcf.gz",
    conda:
        "envs/pb_mhc_rse_phase.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        """
        shapeit4.2  -I {input} -H ../resources/1kGP_high_coverage_Illumina.chr6.filtered.SNV_INDEL_SV_phased_panel.bcf -R chr6 --map ../resources/chr6.b38.gmap.gz -T 5 --pbwt-depth 8 -O {output} --use-PS 1e-20 --mcmc-iterations 10b,1p,1b,1p,1b,1p,1b,1p,10m --sequencing
        """
        
rule create_scaffold_table:
    input:
        "../results/{sample}_scaffold/{sample}_shapeit.vcf.gz"
    output:
        "../results/{sample}_scaffold/{sample}_shapeit.txt"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "python scripts/create_phase_table.py {input} {output}"
        
rule kmer_downsample:
    input:
        "../results/{sample}_reads/{sample}_MHC_full_all.fasta"
    output:
        "../results/{sample}_reads/{sample}_MHC_full_norm.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=20000
    shell:
        "normalize-by-median.py -k 31 -C 250 -M {resources.mem_mb}M -o {output} {input}"
    
rule count_kmers:
    input:
        "../results/{sample}_reads/{sample}_MHC_full_norm.fasta"
    output:
        "../results/{sample}_reads/{sample}_MHC_jelly.txt"
    params:
        count_file="../results/{sample}_reads/{sample}_MHC_jelly.jf"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 5
    resources:
        mem_mb=2000
    shell:
        """
        jellyfish count -L 2 -C -m 51 -t {threads} -s 10000000 --output {params.count_file} {input}
        jellyfish dump -c -o {output} {params.count_file}
        rm {params.count_file}
        """

rule find_read_overlap:
    input:
        "../results/{sample}_reads/{sample}_MHC_full_norm.fasta"
    output:
        "../results/{sample}_reads/{sample}_MHC_full_norm.paf"
    conda:
        "envs/pb_mhc_rse_minimap_old.yaml"
    threads: 24
    resources:
        mem_mb=2000
    shell:
         "minimap2 -x ava-pb -I 20G -m 200 --dual=yes -t {threads} -2 {input} {input} > {output}"

rule split_chimera:
    input:
        reads="../results/{sample}_reads/{sample}_MHC_full_norm.fasta",
        paf="../results/{sample}_reads/{sample}_MHC_full_norm.paf",
        kmer="../results/{sample}_reads/{sample}_MHC_jelly.txt"
    output:
        split_reads="../results/{sample}_reads/{sample}_MHC_split.fasta",
        full_reads="../results/{sample}_reads/{sample}_MHC_filt.fasta"
    params:
        dir="../results/{sample}_reads/",
        prefix="{sample}_MHC"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 12
    resources:
        mem_mb=2000
    shell:
        "python scripts/split_chimeric_reads.py {input.paf} {input.reads} {input.kmer} {params.dir} {params.prefix}"


rule run_collapsed_assembly:
    input:
        "../results/{sample}_reads/{sample}_MHC_split.fasta"
    output:
        "../results/{sample}_canu/{sample}_canu.contigs.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 24
    resources:
        mem_mb=2000
    shell:
        "canu corOutCoverage=200 maxMemory=48G maxThreads={threads} \"batOptions=-dg 3 -db 3 -dr 1 -ca 500 -cp 50\" useGrid=false genomeSize=3.5m "
        "-pacbio-corrected {input} -p {wildcards.sample}_canu -d ../results/{wildcards.sample}_canu/ "
        
        
rule filter_collpased_contigs:
    input:
        "../results/{sample}_canu/{sample}_canu.contigs.fasta"
    output:
        "../results/{sample}_canu/{sample}_filter.contigs.fasta"
    params:
        canu_path="../results/{sample}_canu",
        canu_prefix="{sample}_canu",
        hq_contigs="../results/{sample}_canu/{sample}_hq.contigs.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
    	"""
    	python scripts/filter_diploid_contigs.py {params.canu_path} {params.canu_prefix} minimap2 ../resources/hg38_chr6.fa {params.hq_contigs} -t {threads}
    	python scripts/filter_contigs_by_overlap.py {params.hq_contigs} {output} minimap2 -t {threads}
        samtools faidx {output}
        """

rule align_reads_to_collapsed:
    input:
        contigs="../results/{sample}_canu/{sample}_filter.contigs.fasta",
        reads= "../results/{sample}_reads/{sample}_MHC_filt.fasta"
    output:
        "../results/{sample}_align/{sample}_full.bam"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 12
    resources:
        mem_mb=1000
    shell:
        """
        minimap2 -x map-hifi --secondary=no -t {threads} -a -Y -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}' {input.contigs} {input.reads} | samtools sort - -o {output} && samtools index {output}
        """

rule remove_complement:
    input:
        contigs="../results/{sample}_canu/{sample}_filter.contigs.fasta",
        align="../results/{sample}_align/{sample}_full.bam"
    output:
        "../results/{sample}_align/{sample}_filt.bam"
    params:
        comp_loc="../results/{sample}_align/complement.bed"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        minimap2 -x map-hifi ../resources/hg38_complement.fa {input.contigs} | awk '{{ if ($10 > 1000) printf("%s\\t%s\\t%s\\n",$1,$3,$4) }}' > {params.comp_loc}
        bedtools intersect -abam {input.align} -b {params.comp_loc} -v > {output}
        """

rule split_chimera_by_align:
    input:
        "../results/{sample}_align/{sample}_filt.bam"
    output:
        split_align_prim="../results/{sample}_align/{sample}_primary.bam",
        split_align_all="../results/{sample}_align/{sample}_final.bam"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        python scripts/split_chimeric_reads_alignment.py {input} {output.split_align_prim} -p
        python scripts/split_chimeric_reads_alignment.py {input} {output.split_align_all} -m -q 20
        """

rule call_variants_collapsed:
    input:
        bam="../results/{sample}_align/{sample}_primary.bam",
        ref="../results/{sample}_canu/{sample}_filter.contigs.fasta"
    output:
        full_vcf="../results/{sample}_bin/{sample}_ls.vcf.gz",
        het_vcf="../results/{sample}_bin/{sample}_het.vcf.gz",
        hom_vcf="../results/{sample}_bin/{sample}_hom.vcf.gz"
    params:
        output_prefix="../results/{sample}_bin/{sample}_ls"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=4000
    shell:
        """
        python scripts/longshot_driver.py {input.bam} {input.ref} {params.output_prefix} -p {threads} --min_alt_count 3
        python scripts/split_vcf_by_genotype.py {output.full_vcf} {output.het_vcf} {output.hom_vcf}
        """

rule update_assembly_with_variants:
    input:
        variants="../results/{sample}_bin/{sample}_hom.vcf.gz",
        contigs="../results/{sample}_canu/{sample}_filter.contigs.fasta"
    output:
        "../results/{sample}_canu/{sample}_final.contigs.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        bcftools consensus -f {input.contigs} -o {output} {input.variants}
        samtools faidx {output}
        """

rule phase_variants_collapsed:
    input:
        contigs="../results/{sample}_canu/{sample}_final.contigs.fasta",
        variants="../results/{sample}_bin/{sample}_het.vcf.gz",
        align="../results/{sample}_align/{sample}_final.bam"
    output:
        variants="../results/{sample}_bin/{sample}_final.vcf.gz",
        regions="../results/{sample}_bin/{sample}_phase.gtf"
    params:
        inter_vcf="../results/{sample}_bin/{sample}_phase.vcf.gz"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        """
        whatshap phase --reference {input.contigs} -o {params.inter_vcf} --ignore-read-groups {input.variants} {input.align}
        python scripts/set_isolated_snp_phase.py {params.inter_vcf} {output.variants}
        whatshap stats --gtf={output.regions} {output.variants}
        tabix -p vcf -f {output.variants}
        """

rule haplotag_reads:
    input: 
        contigs="../results/{sample}_canu/{sample}_final.contigs.fasta",
        variants="../results/{sample}_bin/{sample}_final.vcf.gz",
        align="../results/{sample}_align/{sample}_final.bam"
    output:
        "../results/{sample}_align/{sample}_tagged.bam"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        """
        whatshap haplotag --no-reference -o {output} {input.variants} {input.align}
        samtools index {output}
	    """

rule align_probes_to_collapsed:
    input:
        contigs="../results/{sample}_canu/{sample}_final.contigs.fasta", 
        shapeit="../results/{sample}_scaffold/{sample}_shapeit.txt"
    output:
        front_align="../results/{sample}_bin/{sample}_front.bam",
        back_align="../results/{sample}_bin/{sample}_back.bam"
    conda:
        "envs/pb_mhc_rse_bwa.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        bwa index {input.contigs}
        bwa mem {input.contigs} -a ../resources/Infinium_front.fasta | samtools sort - | scripts/extract_het_probe_alignments.py {input.shapeit} {output.front_align}
        bwa mem {input.contigs} -a ../resources/Infinium_back.fasta | samtools sort - | scripts/extract_het_probe_alignments.py {input.shapeit} {output.back_align}
        """

rule partition_reads:
    input:
        align="../results/{sample}_align/{sample}_tagged.bam",
        prim="../results/{sample}_align/{sample}_primary.bam",
        front="../results/{sample}_bin/{sample}_front.bam",
        back="../results/{sample}_bin/{sample}_back.bam",
        variants="../results/{sample}_bin/{sample}_final.vcf.gz",
        regions="../results/{sample}_bin/{sample}_phase.gtf",
        contigs="../results/{sample}_canu/{sample}_final.contigs.fasta",
        shapeit="../results/{sample}_scaffold/{sample}_shapeit.txt"
    output:
        hap1_reads="../results/{sample}_hap1_asm_r1/{sample}_hap1.fasta",
        hap2_reads="../results/{sample}_hap2_asm_r1/{sample}_hap2.fasta"
    params:
        output_dir="../results/{sample}_bin/{sample}"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        scripts/partition_haplotypes.py {input.contigs} {input.align} {input.prim} {input.shapeit} {input.variants} {input.regions} {input.front} {input.back} {params.output_dir}
        cat {params.output_dir}_hap1_only.fasta {params.output_dir}_unknown.fasta > {output.hap1_reads}
        cat {params.output_dir}_hap2_only.fasta {params.output_dir}_unknown.fasta > {output.hap2_reads}
        """

rule extract_hap_reads:
    input:
        hap_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}.fasta",
        filt_reads="../results/{sample}_reads/{sample}_MHC_filt.fasta"
    output:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_unedit.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        "python scripts/select_reads_by_name.py {input.filt_reads} {input.hap_reads} {output}"
        
        
rule align_hap_reads_collapsed_asm:
    input:
        contigs="../results/{sample}_canu/{sample}_final.contigs.fasta",
        edit_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}.fasta",
        unedit_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_unedit.fasta",
    output:
        edit_align="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edit.bam",
        unedit_align="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_unedit.bam"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        minimap2 -x map-hifi --secondary=no -t {threads} -a {input.contigs} {input.edit_reads} | samtools view -h -q 1 | samtools sort - -o {output.edit_align}  && samtools index {output.edit_align}
        minimap2 -x map-hifi --secondary=no -t {threads} -a {input.contigs} {input.unedit_reads} | samtools view -h -q 1 | samtools sort - -o {output.unedit_align}  && samtools index {output.unedit_align}
        """

rule identify_edge_reads:
    input:
        unedit_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_unedit.fasta",
        unedit_align="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_unedit.bam"
    output:
        support_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_support.fasta",
        edge_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edge.fasta",
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "python scripts/identify_edge_reads.py {input.unedit_align} {input.unedit_reads} {output.edge_reads} {output.support_reads}"
        
rule find_edge_overlap:
    input:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_support.fasta"
    output:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}.paf"
    conda:
        "envs/pb_mhc_rse_minimap_old.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        minimap2 -x ava-pb -I 8G -m 200 --dual=yes -t {threads} -2 {input} {input} | awk '{{ c1=split($1,A1,"/"); c2=split($6,A2,"/"); if (A1[c1] == A2[c2]) print }}' > {output}
        """

rule split_edge_reads:
    input:
        support_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_support.fasta",
        edge_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edge.fasta",
        kmer="../results/{sample}_reads/{sample}_MHC_jelly.txt",
        align="../results/{sample}_{hap}_asm_r1/{sample}_{hap}.paf",
    output:
        split_support_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_support_split.fasta",
        split_edge_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edge_split.fasta"
    params:
        output_dir="../results/{sample}_{hap}_asm_r1/",
        output_prefix="{sample}_{hap}_support"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        python scripts/split_chimeric_reads.py {input.align} {input.support_reads} {input.kmer} {params.output_dir} {params.output_prefix}
        python scripts/extract_split_target_reads.py {output.split_support_reads} {input.edge_reads} {output.split_edge_reads}
        """

rule cap_contig_coverage:
    input:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edit.bam"
    output:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_cap.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "python scripts/cap_contig_coverage.py {input} {output}"
        
rule combine_edge_and_capped:
    input:
       capped_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_cap.fasta",
       edge_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_edge_split.fasta"
    output:
       "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_reads.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        """
        python scripts/replace_reads.py {input.capped_reads} {input.edge_reads} {output}
        """

rule create_asm_r1:
    input:
         "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_reads.fasta"
    output:
         "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_canu/{sample}_{hap}_asm_r1_canu.contigs.fasta"
    params:
        canu_dir="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_canu/",
        canu_prefix="{sample}_{hap}_asm_r1_canu"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 24
    resources:
        mem_mb=2000
    shell:
        """
        canu utgOvlErrorRate=0.02 maxMemory=24G maxThreads={threads} useGrid=false genomeSize=3.5m contigFilter="10 5000 0.5 0.5 10" -pacbio-corrected {input} -d {params.canu_dir} -p {params.canu_prefix}
        """
        
rule align_reads_to_asm_r1:
    input: 
        contigs="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_canu/{sample}_{hap}_asm_r1_canu.contigs.fasta",
        reads="../results/{sample}_reads/{sample}_MHC_full_all.fasta"
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch.bam"
    params:
        ref="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_hg38_ref.bam",
        bed="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_contigs.bed",
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 12
    resources:
        mem_mb=2000
    shell:
        """
        zcat -f ../resources/hg38_no_mhc.fa {input.contigs} > {params.ref}
        faidx --transform bed {input.contigs} > {params.bed}
        minimap2 -x map-hifi --secondary=no -t {threads} -a {params.ref} {input.reads} | samtools view -q 1 -h -L {params.bed} | samtools sort - -o {output} && samtools index {output}
        rm {params.ref} {params.bed}
        """
        
rule find_overlap_asm_r1:
    input:
        "../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_canu/{sample}_{hap}_asm_r1_canu.contigs.fasta"
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_overlap.paf"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 2
    resources:
        mem_mb=2000
    shell:
        "minimap2 -x map-hifi -D -c {input} {input} > {output}"
    
rule identify_patch_reads:
    input:
        hap1_reads="../results/{sample}_hap1_asm_r1/{sample}_hap1_asm_r1_reads.fasta",
        hap2_reads="../results/{sample}_hap2_asm_r1/{sample}_hap2_asm_r1_reads.fasta",
        hap_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_reads.fasta",
        all_reads="../results/{sample}_reads/{sample}_MHC_full_all.fasta",
        overlap="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_overlap.paf",
        align="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch.bam"
    output:
        support_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support.fasta",
        patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch.fasta"
    params:
        opp_reads=lambda wc: OPP[wc.hap]
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        "python scripts/identify_patch_reads.py {input.align} {input.overlap} {input.hap_reads} ../results/{wildcards.sample}_{params.opp_reads}_asm_r1/{wildcards.sample}_{params.opp_reads}_asm_r1_reads.fasta {input.all_reads} {output.patch_reads} {output.support_reads} -e 5000 -l 10000"
    
rule find_patch_overlap_n1:
    input:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support.fasta"
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_n1.paf"
    conda:
        "envs/pb_mhc_rse_minimap_old.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        minimap2 -x ava-pb -I 8G -m 200 --dual=yes -t {threads} -2 {input} {input} | awk '{{ c1=split($1,A1,"/"); c2=split($6,A2,"/"); if (A1[c1] == A2[c2]) print }}' > {output}
        """

rule split_patch_reads_n1:
    input:
        support_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support.fasta",
        patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch.fasta",
        kmer="../results/{sample}_reads/{sample}_MHC_jelly.txt",
        align="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_n1.paf",
    output:
        split_support_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support_split_n1.fasta",
        split_patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_split_n1.fasta"
    params:
        output_dir="../results/{sample}_{hap}_asm_r2/",
        output_prefix="{sample}_{hap}_support_temp",
        support_temp="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support_temp_split.fasta",
        patch_temp="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_temp_split.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        python scripts/split_chimeric_reads.py {input.align} {input.support_reads} {input.kmer} {params.output_dir} {params.output_prefix}
        python scripts/extract_split_target_reads.py {params.support_temp} {input.patch_reads} {params.patch_temp}
        python scripts/rename_split_reads.py {params.patch_temp} {params.support_temp} {output.split_patch_reads} {output.split_support_reads}
        rm {params.support_temp} {params.patch_temp}
        """

rule find_patch_overlap_n2:
    input:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support_split_n1.fasta",
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_n2.paf"
    conda:
        "envs/pb_mhc_rse_minimap_old.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        minimap2 -x ava-pb -I 8G -m 200 --dual=yes -t {threads} -2 {input} {input} | awk '{{ c1=split($1,A1,"/"); c2=split($6,A2,"/"); if (A1[c1] == A2[c2]) print }}' > {output}
        """

rule split_patch_reads_n2:
    input:
        support_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support_split_n1.fasta",
        patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_split_n1.fasta",
        kmer="../results/{sample}_reads/{sample}_MHC_jelly.txt",
        align="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_n2.paf",
    output:
        patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_final.fasta",
    params:
        output_dir="../results/{sample}_{hap}_asm_r2/",
        output_prefix="{sample}_{hap}_support_temp",
        support_temp="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_support_temp_split.fasta",
        patch_temp="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_temp_split.fasta",
        patch_rename="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_rename_split.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 4
    resources:
        mem_mb=2000
    shell:
        """
        python scripts/split_chimeric_reads.py {input.align} {input.support_reads} {input.kmer} {params.output_dir} {params.output_prefix}
        python scripts/extract_split_target_reads.py {params.support_temp} {input.patch_reads} {params.patch_temp}
        python scripts/rename_patch_reads.py {params.patch_temp} {output.patch_reads}
        rm {params.support_temp} {params.patch_temp}
        """
        
rule replace_with_patched:
    input:
        patch_reads="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_patch_final.fasta",
        hap_reads="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_reads.fasta"
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_asm_r2_reads.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        "python scripts/replace_reads.py {input.hap_reads} {input.patch_reads} {output}"


rule create_haplotype_assembly_r2:
    input:
         "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_asm_r2_reads.fasta"
    output:
         "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_asm_r2_canu/{sample}_{hap}_asm_r2_canu.contigs.fasta"
    params:
        canu_dir="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_asm_r2_canu/",
        canu_prefix="{sample}_{hap}_asm_r2_canu"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 24
    resources:
        mem_mb=2000
    shell:
        """
        canu utgOvlErrorRate=0.02 maxMemory=24G maxThreads={threads} useGrid=false genomeSize=3.5m contigFilter="10 5000 0.5 0.5 10" -pacbio-corrected {input} -d {params.canu_dir} -p {params.canu_prefix}
        """

rule assembly_trimming:
    input:
        asm1="../results/{sample}_{hap}_asm_r1/{sample}_{hap}_asm_r1_canu/{sample}_{hap}_asm_r1_canu.contigs.fasta",
        asm2="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_asm_r2_canu/{sample}_{hap}_asm_r2_canu.contigs.fasta"
    output:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_edited_contigs.fasta"
    params:
        temp_contigs="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_temp_contigs.fasta"
    conda:
        "envs/pb_mhc_rse_main.yaml"
    threads: 1
    resources:
        mem_mb=4000
    shell:
        """
        python scripts/patch_haploid_contigs.py {input.asm2} {input.asm1} {params.temp_contigs} minimap2
        python scripts/trim_contigs.py {params.temp_contigs} {output} minimap2
        rm {params.temp_contigs}
        """
       
rule assembly_merging:
    input:
        "../results/{sample}_{hap}_asm_r2/{sample}_{hap}_edited_contigs.fasta"
    output:
        "../results/{sample}_final_contigs/{sample}_{hap}_final_contigs.fasta"
    params:
        amos_pre="../results/{sample}_{hap}_asm_r2/{sample}_{hap}_minimus"
    conda:
        "envs/pb_mhc_rse_amos.yaml"
    threads: 1
    resources:
        mem_mb=8000
    shell:
        """
        toAmos -s {input} -o {params.amos_pre}.afg
        minimus2 {params.amos_pre} -D OVERLAP=100 -D CONSERR=0.02 -D MAXTRIM=500
        cat {params.amos_pre}.fasta {params.amos_pre}.singletons.seq > {output}
        rm -Rf {params.amos_pre}.*
        """
        
onsuccess:
    print("Workflow finished, no error")
    shell("mail -s 'Workflow finished no error' {config[email]} < {log}")

onerror:
    print("An error occurred")
    shell("mail -s 'an error occurred' {config[email]} < {log}")
